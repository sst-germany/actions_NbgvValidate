name: 'NBGV Validate'
description: 'Validates the state of NBGV GitVersioning.'

inputs:
  requiresTagName:
    description: 'If not empty, the git TAG will be checked against this pattern.'
    required: false
    default: '' # no validation

  # Only checked if "requiresTagName==yes".
  requiredMatchedDigits:
    description: 'Number of required digits that match the version number.'
    required: false
    default: '0' # no required match

  requiresPublicRelease:
    description: 'yes/no'
    required: false
    default: '' # no validation

  requiresPrereleaseVersion:
    description: 'yes/no'
    required: false
    default: '' # no validation

  requiresTagVersionMatch:
    description: 'yes/no'
    required: false
    default: '' # no validation


runs:
  using: 'composite'
  steps:
    - name: Install NBGV Action
      uses: dotnet/nbgv@master
      with:
        setAllVars: true 

    - name: Validate TAG name
      shell: pwsh
      run: |
        Write-Host "(NBGV-TagName): Validating..."
        if ( ${{ inputs.requiresTagName }} -eq "" ) 
        {                                    
          Write-Host "(NBGV-TagName): Validation skipped."
        }
        else
        {
          $githubRef = $env:GITHUB_REF
          if (-not ($githubRef.StartsWith("refs/tags/"))) 
          {
            throw "(NBGV-TagName): Validation failed, reason: Not a TAG."
          }
          $tagName = $env:GITHUB_REF_NAME
          if ($tagName -notlike "${{ inputs.requiresTagName }}") 
          {
             throw "(NBGV-TagName): Validation failed, reason: TAG does not match pattern. Requested(${{ inputs.requiresTagName }}), Found($tagName)."
          }
          
          $rawValue = "${{ inputs.requiredMatchedDigits }}"
          if (-not [int]::TryParse($rawValue, [ref]$requiredDigits)) 
          {
            throw "(NBGV-TagName): Input 'requiredMatchedDigits' is not a valid integer (Found: '$rawValue')."
          }         
          
          #TODO: Implementiere, das geprüft wird ob die gewünschte Anzahl an Zahlengruppen der Versionsnummer aus NBGV identisch mit der in dem TAG angegebenen Nummer ist.
          
          # Prüfe, ob eine Versionsübereinstimmung verlangt wird
          if ($requiredDigits -gt 0) 
          {
            $nbgvVersion = $env:NBGV_Version
            Write-Host "(NBGV-TagName): Checking $requiredDigits digit group(s) match between NBGV version ($nbgvVersion) and tag ($tagName)."

            # Nur die Zifferngruppen (z. B. 1.2.3 → [1,2,3])
            $nbgvParts = ($nbgvVersion -split '[^0-9]+') | Where-Object { $_ -ne "" }
            $tagParts  = ($tagName     -split '[^0-9]+') | Where-Object { $_ -ne "" }
            
            if ($nbgvParts.Count -lt $requiredDigits -or $tagParts.Count -lt $requiredDigits) 
            {
              throw "(NBGV-TagName): Validation failed, reason: Not enough numeric parts to compare. Required $requiredDigits, Found NBGV=$($nbgvParts.Count), Tag=$($tagParts.Count)."
            }
            
            for ($i = 0; $i -lt $requiredDigits; $i++) 
            {
              if ($nbgvParts[$i] -ne $tagParts[$i]) 
              {
                throw "(NBGV-TagName): Validation failed, reason: Digit group $i does not match. NBGV=$($nbgvParts[$i]), Tag=$($tagParts[$i])."
              }
            }

            Write-Host "(NBGV-TagName): Validation success: First $requiredDigits digit group(s) match."
          }
        }
        
    - name: Validate NBGV-PublicRelease
      shell: pwsh
      run: |
        $publicRelease = $env:NBGV_PublicRelease
        Write-Host "(NBGV-PublicRelease): Validating..."
        if (${{ inputs.requiresPublicRelease }} -eq "") 
        {
          Write-Host "(NBGV-PublicRelease): Validation skipped."
        }
        elseif (${{ inputs.requiresPublicRelease }} -ieq "yes") 
        {
          if (-not ($publicRelease -ieq "True")) 
          {
            throw "(NBGV-PublicRelease): Validation failed, reason: PublicRelease expected but not detected."
          } 
          Write-Host "(NBGV-PublicRelease): Validation success: PublicRelease detected, that was expected."
        }
        elseif (${{ inputs.requiresPublicRelease }} -ieq "no") 
        {
          if (-not ($publicRelease -ieq "False")) {
            throw "(NBGV-PublicRelease): Validation failed, reason: PublicRelease not expected but detected."
          } 
          Write-Host "(NBGV-PublicRelease): Validation success: PublicRelease not detected, that was expected."
        }
        else 
        {
          throw "(NBGV-PublicRelease): Validation failed, reason: Must be 'yes','no' or empty. Found(${{ inputs.requiresPublicRelease }})."
        }

    - name: Validate NBGV-PrereleaseVersion
      shell: pwsh
      run: |
        $preRelease = $env:NBGV_PrereleaseVersion
        Write-Host "(NBGV-PrereleaseVersion): Validating..."
        if (${{ inputs.requiresPrereleaseVersion }} -eq "")
        {
          Write-Host "(NBGV-PrereleaseVersion): Validation skipped."
        }
        elseif (${{ inputs.requiresPrereleaseVersion }} -ieq "yes") 
        {
          if ($preRelease -eq "")
          {
            throw "(NBGV-PrereleaseVersion): Validation failed, reason: Prerelease expected but not detected."
          }
          Write-Host "(NBGV-PrereleaseVersion): Validation success: PreRelease detected ($preRelease), that was expected."
        }
        elseif (${{ inputs.requiresPrereleaseVersion }} -ieq "no") 
        {
          if ($preRelease -ne "") {
            throw "(NBGV-PrereleaseVersion): Validation failed, reason: Prerelease not expected but detected."
          }
          Write-Host "(NBGV-PrereleaseVersion): Validation success: PreRelease not detected, that was expected."
        } 
        else 
        {
          throw "(NBGV-PrereleaseVersion): Validation failed, reason: Must be 'yes', 'no' or empty. Found(${{ inputs.requiresPrereleaseVersion }})"
        }